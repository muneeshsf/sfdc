// Define the list of fields to check
String[] fieldsToCheck = new String[]{'ParentId','Website','Type','Industry','Primary_site__c','Description__c','WA_Agreement_Signed__c','Account Owner','WP_Target_Account__c','Customer_Type__c','Stage_of_Journey__c','Ave_Daily_Conversation_Volume__c','Contract_Number__c','Contract_Integration_Id__c','External_ID__c','Verification_Status__c','priority_whatsapp__c','Original_Lead_Source_Detail__c','Business_Manager_ID__c','App_Id__c','SMB_Region__c','Is_GBG_BoB__c','iswhatsapp__c','WAPartnerTier__c','WA_Partner_Type__c','BMG_BMA_Signed__c','BMG_Partner_Screening_Complete__c','Is_BSP_Meta_Supplier__c','Eligible_For_BMA_Incentives__c','MDF_Enabled__c','BMG_Product_Line__c'};

// Define the user IDs to check permissions for
Set<Id> userIds = new Set<Id>{'005Kj00000CoV71IAF', '0058V00000E8AhnQAF','0051H000008pJUlQAM','0058V00000CD2JQQA1','0058V00000CDGqHQAX','00512000006LKOVAA4'}; // Add more user IDs as needed

String csvContent = 'User,Permission Sets,Field,Edit Permission\n';

for (Id userId : userIds) {
    // Query PermissionSetAssignment
    List<PermissionSetAssignment> permissionSetAssignments = [
        SELECT PermissionSetId, PermissionSet.Name 
        FROM PermissionSetAssignment 
        WHERE AssigneeId = :userId
    ];

    Set<Id> permissionSetIds = new Set<Id>();
    String permissionSetNames = '';
    for (PermissionSetAssignment psa : permissionSetAssignments) {
        permissionSetIds.add(psa.PermissionSetId);
        permissionSetNames += psa.PermissionSet.Name + ', ';
    }
    if (permissionSetNames.endsWith(', ')) {
        permissionSetNames = permissionSetNames.substring(0, permissionSetNames.length() - 2);
    }

    Id profileId = [SELECT ProfileId, Name FROM User WHERE Id = :userId].ProfileId;
    String userName = [SELECT Name FROM User WHERE Id = :userId].Name;
    permissionSetIds.add(profileId);

    // Query FieldPermissions
    List<FieldPermissions> fieldPermissions = [
        SELECT SobjectType, Field, PermissionsRead, PermissionsEdit 
        FROM FieldPermissions 
        WHERE ParentId IN :permissionSetIds AND SobjectType = 'Account' AND Field IN :getFieldFullNames(fieldsToCheck)
    ];

    csvContent += 'User: ' + userName + '\n';
    csvContent += 'Permission Sets: ' + permissionSetNames + '\n';
    csvContent += 'Field,Edit Permission\n';

    // Check field-level security
    for (String field : fieldsToCheck) {
        Boolean hasEditPermission = false;
        for (FieldPermissions fp : fieldPermissions) {
            if (fp.Field == 'Account.' + field && fp.PermissionsEdit) {
                hasEditPermission = true;
                break;
            }
        }
        csvContent += field + ',' + hasEditPermission + '\n';
    }
    csvContent += '\n\n';
}

sendEmailWithCsv('Field Permissions Report', 'Please find the field permissions report attached.', csvContent);

public Set<String> getFieldFullNames(String[] fieldNames) {
    Set<String> fieldFullNames = new Set<String>();
    for (String fieldName : fieldNames) {
        fieldFullNames.add('Account.' + fieldName);
    }
    return fieldFullNames;
}

public void sendEmailWithCsv(String subject, String body, String csvContent) {
    Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
    mail.setSubject(subject);
    mail.setPlainTextBody(body);
    mail.setToAddresses(new String[] { UserInfo.getUserEmail() });
    
    // Create a CSV attachment
    Messaging.EmailFileAttachment attachment = new Messaging.EmailFileAttachment();
    attachment.setContentType('text/csv');
    attachment.setFileName('field_permissions_report.csv');
    attachment.setBody(Blob.valueOf(csvContent));
    
    // Add the attachment to the email
    mail.setFileAttachments(new Messaging.EmailFileAttachment[] { attachment });
    
    // Send the email
    Messaging.sendEmail(new Messaging.SingleEmailMessage[] { mail });
}
