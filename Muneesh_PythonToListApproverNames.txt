import os
import xml.etree.ElementTree as ET

# Set the folder path containing approval process XMLs
input_folder = "C:\\Muneesh\\ApprovalProcesses\\unpackaged\\approvalProcesses"
output_file = "c:\\Muneesh\\Approvers_Report.xlsx"

# Verify input folder path
if not os.path.exists(input_folder):
    print(f"❌ Error: Input folder '{input_folder}' does not exist.")
    exit()

if not os.path.isdir(input_folder):
    print(f"❌ Error: '{input_folder}' is not a directory.")
    exit()

# Define namespace
ns = {"sf": "http://soap.sforce.com/2006/04/metadata"}

# List to hold extracted data
data = []

# Loop through all XML files in the folder
for filename in os.listdir(input_folder):
    if filename.endswith(".approvalProcess"):
        filepath = os.path.join(input_folder, filename)
        try:
            tree = ET.parse(filepath)
            root = tree.getroot()
            process_name = filename.replace(".approvalProcess", "")
            steps = root.findall("sf:approvalStep", ns)
            print("Steps : " + str(len(steps)))
            for step in steps:
                step_name = step.findtext("sf:name", default="UnnamedStep", namespaces=ns)
                assigned_approvers = step.findall("sf:assignedApprover", ns)
                print("Step Name : " + step_name)
                print("Assigned Approvers : " + str(len(assigned_approvers)))
                for approver in assigned_approvers:
                    approver_name = approver.findtext("sf:approver/sf:name", default="N/A", namespaces=ns)
                    approver_type = approver.findtext("sf:approver/sf:type", default="Unknown", namespaces=ns)
                    print(f"Name : {approver_name}")
                    print(f"Step Name : {step_name}")
                    data.append({
                        "Approval Process": process_name,
                        "Step": step_name,
                        "Approver Type": approver_type,
                        "Approver Name": approver_name
                    })
        except ET.ParseError as e:
            print(f"❌ Error parsing {filename}: {str(e)}")

# Create Excel report
if data:
    #df = pd.DataFrame(data)
    #df.to_excel(output_file, index=False)
    print(f"✅ Approvers report saved to: {output_file}")
else:
    print("❌ No data extracted. Please check XML files.")
